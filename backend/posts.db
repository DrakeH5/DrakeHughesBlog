{"image":"tictactoe.go img.png","title":"Tic-tac-toe in Go","description":"Creating a simple tic-tac-toe game with golang","article":"Recently I decided I wanted to learn Golang. I've always been a huge believer in learning by doing, so after watching a few basic tutorials, I set out to create a basic game that can be played in the terminal. I settled on tic-tac-toe because I expected it to be fairly easy to code whilist giving me the needed push to learn how to implement basic functionality in Go. \r\n\r\nYou can check out the code at https://github.com/DrakeH5/Tic-Tac-Toe-in-Go but I will be giving a short walkthrough of the code here. \r\n\r\n\r\nFirst, I defiend the grid as essentially an array containing three arrays, each contaning three strings. These strings I use to represent the sqaures in the game. \r\nNext I create a simple loop where I say that gameOVer=false and say while this is true to loop through my game loop. This allows me to simple set gameOver=true whenever a player-win or tie event occurs. \r\nNext is my terminal input where I ask for the player's collumn and row input and as log as a number is inputed, I replace that square in the grid with an \"X\".\r\nMy next goal is to detect if there is a game over state. I have to do this for both the player and the ai, so I set a checkPlayer variable to either X or Y and loop through my game over detection code twice, once for each. First I detect a horizontal three-in-a-row. I do this simply with two for loops and if a row does not contain the player I'm currently checking for, I just skip that row because I know there is no way that player could win in that row; however, if all the tiles in that row are filed by the same character (X or Y) then I set gameOver equal to true and print which player won. Secondly, I checked for a win vertically. I do this in essentially the same way as I did for the horizontal check. Finally, I did a diagonal check. I did this by realizing that you could only win diagonally in two ways so I simply hard coded in a check for either of these two win states. Next, I had to detect if their was a tie. I do this by checking if there is a single empty space on the board and if not, then the game is over due to a tie. \r\nNext, I get the ai's move. I tried to do so by generating a random number between zero and two however I am not sure how well this worked out. But I simply make sure Y is not moving onto a space already with a move on it, and as long as it's not, I set Y on that tile and update the grid.\r\nFinally, I draw what the updated board looks like, and assuming the game is not over, I loop through all of this again.\r\n\r\nThis is a basic rundown of my first golang application which I had fun creating and hope to add more features (such as a minimax algorithm for the ai) in the future. ","date":"6/15/2022","_id":"MVezDT0V6P9Zf9Hf"}
